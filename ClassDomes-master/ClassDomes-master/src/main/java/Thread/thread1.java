package Thread;

/**
 * 2022.03.20 记录多线程学习（一）
 *
 * 1.进程包含线程！一个进程有多个线程
 * 2.进程和线程都可以解决并发编程问题场景，但是进程在频繁创建和销毁中，开销更高，线程开销更低。因此，线程比进程更加轻量。
 * 3.进程是系统分配资源（内存、文件）的一个基本单位，但是线程是系统调度执行（cpu的资源）的基本单位。
 * 4.进程之间是相互独立的，各自有各自的虚拟地址空间，但是，同一个进程内部的多个线程之间共有同一个内存空间以及文件资源。
 *    一个进程挂了，其他进程都没事儿，但是一个线程挂了，很可能把整个进程带走了。
 * 5.java标准库中提供了 Thread类，来表示和操作线程。创建好的Thread实例，其实是和操作系统中的线程一一对应的关系。
 */
public class thread1 {
    /**
     * 最基本的创建线程办法，写法1：
     * 创建子类，继承自Tread，并且重写run方法。run方法描述了这个线程内部要执行哪些代码。
     * run方法中的逻辑是在新创建的线程中执行的。
     */
    public static void main(String[] args) {
//        这一步相当于分配工作
        Thread t = new MyThread1();
//        调用start方法才表示线程真正的在系统中创建了线程，真正的开始执行run操作
//        在调用start之前，系统中没有创建线程
        t.start();
    }

}
class MyThread1 extends Thread{
    @Override
    public void run() {
        System.out.println("最基本的 线程 创建方式");
    }
}
